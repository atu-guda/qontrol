#############################################################################
# Makefile for building: libelems.a
# Generated by qmake (1.07a) (Qt 3.3.8b) on: Fri Mar  9 16:03:13 2012
# Project:  elems.pro
# Template: lib
# Command: $(QMAKE) -o Makefile elems.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -march=i686 -mtune=generic -fasynchronous-unwind-tables -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
CXXFLAGS = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -march=i686 -mtune=generic -fasynchronous-unwind-tables -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib/qt-3.3/mkspecs/default -I. -I../qmo2 -I$(QTDIR)/include
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = tadjgen.h \
		tcorralalysis.h \
		tcounter.h \
		tcriterion.h \
		tdelay.h \
		textrlatch.h \
		tfourier.h \
		tfriction.h \
		tfuncmisc.h \
		tfuncpoly.h \
		tfunctrans.h \
		tgraph.h \
		thyst.h \
		tinputany.h \
		tintegrator.h \
		tlatch.h \
		tlinear.h \
		tlinp1q0.h \
		tlogic.h \
		tlorenz.h \
		tmultipl.h \
		toutarr.h \
		toutputany.h \
		tpid.h \
		trand.h \
		trandtrigg.h \
		tsource.h \
		tsourcelin.h \
		tswitch.h \
		ttrigger.h \
		tvibro.h
SOURCES = tadjgen.cpp \
		tcorralalysis.cpp \
		tcounter.cpp \
		tcriterion.cpp \
		tdelay.cpp \
		textrlatch.cpp \
		tfourier.cpp \
		tfriction.cpp \
		tfuncmisc.cpp \
		tfuncpoly.cpp \
		tfunctrans.cpp \
		tgraph.cpp \
		thyst.cpp \
		tinputany.cpp \
		tintegrator.cpp \
		tlatch.cpp \
		tlinear.cpp \
		tlinp1q0.cpp \
		tlogic.cpp \
		tlorenz.cpp \
		tmultipl.cpp \
		toutarr.cpp \
		toutputany.cpp \
		tpid.cpp \
		trand.cpp \
		trandtrigg.cpp \
		tsource.cpp \
		tsourcelin.cpp \
		tswitch.cpp \
		ttrigger.cpp \
		tvibro.cpp
OBJECTS = tadjgen.o \
		tcorralalysis.o \
		tcounter.o \
		tcriterion.o \
		tdelay.o \
		textrlatch.o \
		tfourier.o \
		tfriction.o \
		tfuncmisc.o \
		tfuncpoly.o \
		tfunctrans.o \
		tgraph.o \
		thyst.o \
		tinputany.o \
		tintegrator.o \
		tlatch.o \
		tlinear.o \
		tlinp1q0.o \
		tlogic.o \
		tlorenz.o \
		tmultipl.o \
		toutarr.o \
		toutputany.o \
		tpid.o \
		trand.o \
		trandtrigg.o \
		tsource.o \
		tsourcelin.o \
		tswitch.o \
		ttrigger.o \
		tvibro.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = 
OBJMOC = 
DIST	   = elems.pro
QMAKE_TARGET = elems
DESTDIR  = 
TARGET   = libelems.a

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET) 

staticlib: $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(OBJCOMP) 
	-$(DEL_FILE) $(TARGET)
	$(AR) $(TARGET) $(OBJECTS) $(OBJMOC)


mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: elems.pro  /usr/lib/qt-3.3/mkspecs/default/qmake.conf /usr/lib/qt-3.3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile elems.pro
qmake: 
	@$(QMAKE) -o Makefile elems.pro

dist: 
	@mkdir -p .tmp/elems && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/elems/ && ( cd `dirname .tmp/elems` && $(TAR) elems.tar elems && $(GZIP) elems.tar ) && $(MOVE) `dirname .tmp/elems`/elems.tar.gz . && $(DEL_FILE) -r .tmp/elems

mocclean:

uiclean:

yaccclean:
lexclean:
clean:
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

tadjgen.o: tadjgen.cpp tadjgen.h

tcorralalysis.o: tcorralalysis.cpp toutarr.h \
		tcorralalysis.h

tcounter.o: tcounter.cpp tcounter.h

tcriterion.o: tcriterion.cpp tcriterion.h

tdelay.o: tdelay.cpp tdelay.h

textrlatch.o: textrlatch.cpp textrlatch.h

tfourier.o: tfourier.cpp toutarr.h \
		tfourier.h

tfriction.o: tfriction.cpp tfriction.h

tfuncmisc.o: tfuncmisc.cpp tfuncmisc.h

tfuncpoly.o: tfuncpoly.cpp tfuncpoly.h

tfunctrans.o: tfunctrans.cpp tfunctrans.h

tgraph.o: tgraph.cpp tgraph.h \
		toutarr.h

thyst.o: thyst.cpp thyst.h

tinputany.o: tinputany.cpp tinputany.h

tintegrator.o: tintegrator.cpp tintegrator.h

tlatch.o: tlatch.cpp tlatch.h

tlinear.o: tlinear.cpp tlinear.h

tlinp1q0.o: tlinp1q0.cpp tlinp1q0.h

tlogic.o: tlogic.cpp tlogic.h

tlorenz.o: tlorenz.cpp tlorenz.h

tmultipl.o: tmultipl.cpp tmultipl.h

toutarr.o: toutarr.cpp toutarr.h

toutputany.o: toutputany.cpp toutputany.h

tpid.o: tpid.cpp tpid.h

trand.o: trand.cpp trand.h

trandtrigg.o: trandtrigg.cpp trandtrigg.h

tsource.o: tsource.cpp tsource.h

tsourcelin.o: tsourcelin.cpp tsourcelin.h

tswitch.o: tswitch.cpp tswitch.h

ttrigger.o: ttrigger.cpp ttrigger.h

tvibro.o: tvibro.cpp tvibro.h

####### Install

install:  

uninstall:  

